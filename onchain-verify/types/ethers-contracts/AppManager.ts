/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface AppManagerInterface extends Interface {
    getFunction(nameOrSignature: "addApp" | "getApp" | "owner" | "removeApp" | "setZecFrost" | "updateApp" | "verify" | "zecFrost"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "AppAdded" | "AppRemoved" | "AppUpdated" | "ZecFrostSet"): EventFragment;

    encodeFunctionData(functionFragment: 'addApp', values: [BigNumberish, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getApp', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'removeApp', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setZecFrost', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'updateApp', values: [BigNumberish, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'verify', values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'zecFrost', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'addApp', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getApp', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'removeApp', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setZecFrost', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateApp', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'verify', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'zecFrost', data: BytesLike): Result;
  }

  
    export namespace AppAddedEvent {
      export type InputTuple = [appid: BigNumberish, owner: AddressLike, pkx: BigNumberish, pky: BigNumberish, signerAddr: AddressLike];
      export type OutputTuple = [appid: bigint, owner: string, pkx: bigint, pky: bigint, signerAddr: string];
      export interface OutputObject {appid: bigint, owner: string, pkx: bigint, pky: bigint, signerAddr: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace AppRemovedEvent {
      export type InputTuple = [appid: BigNumberish];
      export type OutputTuple = [appid: bigint];
      export interface OutputObject {appid: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace AppUpdatedEvent {
      export type InputTuple = [appid: BigNumberish, pkx: BigNumberish, pky: BigNumberish, signerAddr: AddressLike];
      export type OutputTuple = [appid: bigint, pkx: bigint, pky: bigint, signerAddr: string];
      export interface OutputObject {appid: bigint, pkx: bigint, pky: bigint, signerAddr: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ZecFrostSetEvent {
      export type InputTuple = [oldAddr: AddressLike, newAddr: AddressLike];
      export type OutputTuple = [oldAddr: string, newAddr: string];
      export interface OutputObject {oldAddr: string, newAddr: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface AppManager extends BaseContract {
    
    connect(runner?: ContractRunner | null): AppManager;
    waitForDeployment(): Promise<this>;

    interface: AppManagerInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    addApp: TypedContractMethod<
      [appid: BigNumberish, pkx: BigNumberish, pky: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    getApp: TypedContractMethod<
      [appid: BigNumberish, ],
      [[string, bigint, bigint, string, boolean] & {appOwner: string, pkx: bigint, pky: bigint, signerAddr: string, exists: boolean }],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    removeApp: TypedContractMethod<
      [appid: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setZecFrost: TypedContractMethod<
      [zecFrost_: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    updateApp: TypedContractMethod<
      [appid: BigNumberish, pkx: BigNumberish, pky: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    verify: TypedContractMethod<
      [message: BytesLike, appid: BigNumberish, rx: BigNumberish, ry: BigNumberish, z: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    zecFrost: TypedContractMethod<
      [],
      [string],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'addApp'): TypedContractMethod<
      [appid: BigNumberish, pkx: BigNumberish, pky: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getApp'): TypedContractMethod<
      [appid: BigNumberish, ],
      [[string, bigint, bigint, string, boolean] & {appOwner: string, pkx: bigint, pky: bigint, signerAddr: string, exists: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'removeApp'): TypedContractMethod<
      [appid: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setZecFrost'): TypedContractMethod<
      [zecFrost_: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateApp'): TypedContractMethod<
      [appid: BigNumberish, pkx: BigNumberish, pky: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'verify'): TypedContractMethod<
      [message: BytesLike, appid: BigNumberish, rx: BigNumberish, ry: BigNumberish, z: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'zecFrost'): TypedContractMethod<
      [],
      [string],
      'view'
    >;

    getEvent(key: 'AppAdded'): TypedContractEvent<AppAddedEvent.InputTuple, AppAddedEvent.OutputTuple, AppAddedEvent.OutputObject>;
getEvent(key: 'AppRemoved'): TypedContractEvent<AppRemovedEvent.InputTuple, AppRemovedEvent.OutputTuple, AppRemovedEvent.OutputObject>;
getEvent(key: 'AppUpdated'): TypedContractEvent<AppUpdatedEvent.InputTuple, AppUpdatedEvent.OutputTuple, AppUpdatedEvent.OutputObject>;
getEvent(key: 'ZecFrostSet'): TypedContractEvent<ZecFrostSetEvent.InputTuple, ZecFrostSetEvent.OutputTuple, ZecFrostSetEvent.OutputObject>;

    filters: {
      
      'AppAdded(uint256,address,uint256,uint256,address)': TypedContractEvent<AppAddedEvent.InputTuple, AppAddedEvent.OutputTuple, AppAddedEvent.OutputObject>;
      AppAdded: TypedContractEvent<AppAddedEvent.InputTuple, AppAddedEvent.OutputTuple, AppAddedEvent.OutputObject>;
    

      'AppRemoved(uint256)': TypedContractEvent<AppRemovedEvent.InputTuple, AppRemovedEvent.OutputTuple, AppRemovedEvent.OutputObject>;
      AppRemoved: TypedContractEvent<AppRemovedEvent.InputTuple, AppRemovedEvent.OutputTuple, AppRemovedEvent.OutputObject>;
    

      'AppUpdated(uint256,uint256,uint256,address)': TypedContractEvent<AppUpdatedEvent.InputTuple, AppUpdatedEvent.OutputTuple, AppUpdatedEvent.OutputObject>;
      AppUpdated: TypedContractEvent<AppUpdatedEvent.InputTuple, AppUpdatedEvent.OutputTuple, AppUpdatedEvent.OutputObject>;
    

      'ZecFrostSet(address,address)': TypedContractEvent<ZecFrostSetEvent.InputTuple, ZecFrostSetEvent.OutputTuple, ZecFrostSetEvent.OutputObject>;
      ZecFrostSet: TypedContractEvent<ZecFrostSetEvent.InputTuple, ZecFrostSetEvent.OutputTuple, ZecFrostSetEvent.OutputObject>;
    
    };
  }